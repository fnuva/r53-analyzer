
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: my-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: my-vpc-internet-gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub my-vpc Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub my-vpc Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub my-vpc Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SimpleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: "simple-sg"
        GroupDescription: "Security group"
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '8080'
              ToPort: '8080'
              CidrIp:  10.0.0.0/16
        SecurityGroupEgress:
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0
  MyServiceA:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: ami-0649a2ac1437cf3b7
        InstanceType: t2.medium
        KeyName: 'simple-keypair'
        NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "SimpleSecurityGroup"
          SubnetId: 
            Ref: "PublicSubnet1"
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
        UserData:
            !Base64 |
            #!/bin/bash
            yum -y update
            python -m SimpleHTTPServer 8080
        Tags:
        -
          Key: Service
          Value:  service-a
  MyServiceB:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: ami-0649a2ac1437cf3b7
        InstanceType: t2.medium
        KeyName: 'simple-keypair'
        NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "SimpleSecurityGroup"
          SubnetId: 
            Ref: "PublicSubnet1"
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
        UserData:
            !Base64 |
            #!/bin/bash
            yum -y update
            echo "*/1 * * * * curl service-a.internal.myservice:8080" >simple_cron
            echo "*/1 * * * * curl service-d.internal.myservice:8080" >> simple_cron
            sudo -u ec2-user bash -c 'crontab simple_cron'
            python -m SimpleHTTPServer 8080
        Tags:
        -
          Key: Service
          Value:  service-b
  MyServiceC:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: ami-0649a2ac1437cf3b7
        InstanceType: t2.medium
        KeyName: 'simple-keypair'
        NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "SimpleSecurityGroup"
          SubnetId: 
            Ref: "PublicSubnet1"
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
        UserData:
            !Base64 |
            #!/bin/bash
            yum -y update
            echo "*/1 * * * * curl service-d.internal.myservice:8080" > simple_cron
            sudo -u ec2-user bash -c 'crontab simple_cron'
            python -m SimpleHTTPServer 8080
        Tags:
        -
          Key: Service
          Value:  service-c
  MyServiceD:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: ami-0649a2ac1437cf3b7
        InstanceType: t2.medium
        KeyName: 'simple-keypair'
        NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "SimpleSecurityGroup"
          SubnetId: 
            Ref: "PublicSubnet1"
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
        UserData:
            !Base64 |
            #!/bin/bash
            yum -y update
            echo "*/1 * * * * curl service-a.internal.myservice:8080" > simple_cron
            sudo -u ec2-user bash -c 'crontab simple_cron'
            python -m SimpleHTTPServer 8080
        Tags:
        -
          Key: Service
          Value:  service-d
  ApplicationLoadBalancerA:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
        Name: "service-a-alb"
        Scheme: "internal"
        Type: "application"
        Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
        SecurityGroups: 
            - !Ref SimpleSecurityGroup
        IpAddressType: "ipv4"
        Tags:
        -
            Key: Service
            Value:  service-a
        LoadBalancerAttributes: 
        - 
            Key: "access_logs.s3.enabled"
            Value: "false"
        - 
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
        - 
            Key: "deletion_protection.enabled"
            Value: "false"
        - 
            Key: "routing.http2.enabled"
            Value: "true"
        - 
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"
  HTTPSListenerA:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancerA
        Port: 8080
        Protocol: "HTTP"
        DefaultActions: 
        - 
            Order: 1
            TargetGroupArn: !Ref ATargetGroup
            Type: "forward"
  ATargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: "/"
        Port: 8080
        Protocol: "HTTP"
        Targets:
        - Id: !Ref MyServiceA
          Port: 8080
        HealthCheckPort: "traffic-port"
        HealthCheckProtocol: "HTTP"
        HealthCheckTimeoutSeconds: 5
        UnhealthyThresholdCount: 2
        TargetType: "instance"
        Matcher: 
            HttpCode: "200"
        HealthyThresholdCount: 5
        VpcId: !Ref VPC
        Name: "target-group-A"
        HealthCheckEnabled: true
        TargetGroupAttributes: 
        - 
            Key: "stickiness.enabled"
            Value: "false"
        - 
            Key: "deregistration_delay.timeout_seconds"
            Value: "300"
        - 
            Key: "stickiness.type"
            Value: "lb_cookie"
        - 
            Key: "stickiness.lb_cookie.duration_seconds"
            Value: "86400"
        - 
            Key: "slow_start.duration_seconds"
            Value: "0"
        - 
            Key: "load_balancing.algorithm.type"
            Value: "round_robin"
  ApplicationLoadBalancerD:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
        Name: "service-d-alb"
        Scheme: "internal"
        Type: "application"
        Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
        SecurityGroups: 
            - !Ref SimpleSecurityGroup
        IpAddressType: "ipv4"
        Tags:
        -
            Key: Service
            Value:  service-d
        LoadBalancerAttributes: 
        - 
            Key: "access_logs.s3.enabled"
            Value: "false"
        - 
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
        - 
            Key: "deletion_protection.enabled"
            Value: "false"
        - 
            Key: "routing.http2.enabled"
            Value: "true"
        - 
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"
  HTTPSListenerD:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancerD
        Port: 8080
        Protocol: "HTTP"
        DefaultActions: 
        - 
            Order: 1
            TargetGroupArn: !Ref DTargetGroup
            Type: "forward"
  DTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: "/"
        Port: 8080
        Protocol: "HTTP"
        Targets:
        - Id: !Ref MyServiceD
          Port: 8080
        HealthCheckPort: "traffic-port"
        HealthCheckProtocol: "HTTP"
        HealthCheckTimeoutSeconds: 5
        UnhealthyThresholdCount: 2
        TargetType: "instance"
        Matcher: 
            HttpCode: "200"
        HealthyThresholdCount: 5
        VpcId: !Ref VPC
        Name: "target-group-D"
        HealthCheckEnabled: true
        TargetGroupAttributes: 
        - 
            Key: "stickiness.enabled"
            Value: "false"
        - 
            Key: "deregistration_delay.timeout_seconds"
            Value: "300"
        - 
            Key: "stickiness.type"
            Value: "lb_cookie"
        - 
            Key: "stickiness.lb_cookie.duration_seconds"
            Value: "86400"
        - 
            Key: "slow_start.duration_seconds"
            Value: "0"
        - 
            Key: "load_balancing.algorithm.type"
            Value: "round_robin"
  MyLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: /aws/route53/logs
        RetentionInDays: 7
  DNS: 
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: 'internal.myservice'
      VPCs: 
      - 
        VPCId: !Ref VPC
        VPCRegion: !Ref "AWS::Region"
        
  R53LogConfiguration:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
    Properties: 
        DestinationArn: !GetAtt MyLogGroup.Arn
        Name: internalServLogs
  R53LogAssociation:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
    Properties: 
        ResolverQueryLogConfigId: !Ref R53LogConfiguration
        ResourceId: !Ref VPC
  myDNSA:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref DNS
      Comment: myELB LoadBalancer.
      RecordSets:
      - Name: service-a.internal.myservice.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'ApplicationLoadBalancerA.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancerA.DNSName'
  myDNSD:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref DNS
      Comment: myELB LoadBalancer.
      RecordSets:
      - Name: service-d.internal.myservice.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'ApplicationLoadBalancerD.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancerD.DNSName'
